package com.tyss.empspringmvc.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.PersistenceUnit;
import javax.persistence.TypedQuery;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Repository;

import com.tyss.empspringmvc.beans.EmployeeBean;

@Repository
public class EmployeeDaoImpl implements EmployeeDAO {
	@PersistenceUnit
	private EntityManagerFactory entityManagerFactory;

	@Override
	public EmployeeBean auth(String email, String password) {
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		String jpql = " from EmployeeBean where email=:email and password=:password";

		TypedQuery<EmployeeBean> query = entityManager.createQuery(jpql, EmployeeBean.class);
		query.setParameter("email", email);
		query.setParameter("password", password);
		try {
			EmployeeBean bean = query.getSingleResult();
			System.out.println(bean.getName());
			return bean;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public boolean register(EmployeeBean bean) {
		BCryptPasswordEncoder encoder= new BCryptPasswordEncoder();
		String encodedPassword=encoder.encode(bean.getPassword());
		bean.setPassword(encodedPassword);
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		EntityTransaction transaction = entityManager.getTransaction();
		
		transaction.begin();
		try {
			entityManager.persist(bean);
			transaction.commit();
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public List<EmployeeBean> getEmployees(String key) {

		String jpql = "from EmployeeBean where name=:name or email=:email";
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		TypedQuery<EmployeeBean> query = entityManager.createQuery(jpql, EmployeeBean.class);
		query.setParameter("email", key);
		query.setParameter("name", key);
		return query.getResultList();
	}

	@Override
	public boolean changePassword(int id, String password) {
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		EntityTransaction transaction = entityManager.getTransaction();
		transaction.begin();
		EmployeeBean bean = entityManager.find(EmployeeBean.class, id);
		bean.setPassword(password);
		transaction.commit();
		return true;
	}

}
